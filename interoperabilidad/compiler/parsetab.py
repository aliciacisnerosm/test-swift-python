
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaCOLON CTEF CTEI CTESTRING DIFFERENT DIVIDE DOT ELSE EQUALS FLOAT GREATER ID IF INT LEFTCURL LEFTPAR LESS MINUS MULTIPLY PLUS PRINT PROGRAM RIGHTCURL RIGHTPAR SEMICOLON VAR\n  estatuto : asignacion \n           | condicion\n           | escritura\n  \n  condicion : condicion_aux bloque SEMICOLON \n            | condicion_aux bloque ELSE bloque SEMICOLON\n  \n  condicion_aux : IF LEFTPAR expresion RIGHTPAR\n  \n  asignacion : ID EQUALS expresion SEMICOLON\n  \n  expresion : exp comp \n            | exp\n  \n  comp : LESS exp \n       | GREATER exp\n       | DIFFERENT exp\n  \n  exp : termino op \n      | termino\n  \n  op : PLUS exp \n     | MINUS exp\n  \n  termino : factor \n          | factor termino_aux\n  \n  termino_aux : MULTIPLY termino \n              | DIVIDE termino\n  \n  factor : LEFTPAR expresion RIGHTPAR \n         | factor_aux\n  \n  factor_aux : PLUS varcte \n             | MINUS varcte \n             | varcte\n  \n  varcte : ID \n         | CTEI \n         | CTEF\n  \n  tipo : INT\n       | FLOAT\n  \n  escritura : PRINT LEFTPAR aux_escritura RIGHTPAR SEMICOLON\n  \n  aux_escritura : expresion\n                | expresion DOT aux_escritura\n                | CTESTRING DOT aux_escritura\n                | CTESTRING\n  \n  vars : VAR aux_var\n  \n  aux_var : ID COLON tipo SEMICOLON\n          | ID COLON tipo SEMICOLON aux_var\n          | ID COLON aux_var\n  \n  programa : PROGRAM ID COLON vars bloque\n           | PROGRAM ID COLON bloque \n  \n  bloque : LEFTCURL aux_bloque RIGHTCURL\n\n  \n  aux_bloque : estatuto\n             | estatuto aux_bloque\n  \n  empty : \n  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,6,9,22,],[0,-41,-40,-42,]),'ID':([2,7,8,13,14,15,16,21,24,26,27,37,39,41,44,50,51,53,54,55,57,58,60,61,67,68,79,80,],[3,11,17,17,-1,-2,-3,11,32,32,32,32,32,32,-4,11,-7,32,32,32,32,32,32,32,32,32,-5,-31,]),'COLON':([3,11,],[4,21,]),'VAR':([4,],[7,]),'LEFTCURL':([4,5,10,18,29,45,50,69,70,],[8,8,-36,8,-39,8,-37,-6,-38,]),'PRINT':([8,13,14,15,16,44,51,79,80,],[19,19,-1,-2,-3,-4,-7,-5,-31,]),'IF':([8,13,14,15,16,44,51,79,80,],[20,20,-1,-2,-3,-4,-7,-5,-31,]),'RIGHTCURL':([12,13,14,15,16,23,44,51,79,80,],[22,-43,-1,-2,-3,-44,-4,-7,-5,-31,]),'EQUALS':([17,],[24,]),'LEFTPAR':([19,20,24,26,27,37,53,54,55,57,58,60,61,67,68,],[26,27,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'INT':([21,],[30,]),'FLOAT':([21,],[31,]),'SEMICOLON':([22,25,28,30,31,32,33,34,35,36,38,40,42,43,52,56,59,63,64,65,66,71,72,73,74,75,76,77,78,],[-42,44,50,-29,-30,-26,51,-9,-14,-17,-22,-25,-27,-28,-8,-13,-18,-23,-24,79,80,-10,-11,-12,-15,-16,-19,-20,-21,]),'ELSE':([22,25,],[-42,45,]),'PLUS':([24,26,27,32,35,36,37,38,40,42,43,53,54,55,57,58,59,60,61,63,64,67,68,76,77,78,],[39,39,39,-26,57,-17,39,-22,-25,-27,-28,39,39,39,39,39,-18,39,39,-23,-24,39,39,-19,-20,-21,]),'MINUS':([24,26,27,32,35,36,37,38,40,42,43,53,54,55,57,58,59,60,61,63,64,67,68,76,77,78,],[41,41,41,-26,58,-17,41,-22,-25,-27,-28,41,41,41,41,41,-18,41,41,-23,-24,41,41,-19,-20,-21,]),'CTEI':([24,26,27,37,39,41,53,54,55,57,58,60,61,67,68,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'CTEF':([24,26,27,37,39,41,53,54,55,57,58,60,61,67,68,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'CTESTRING':([26,67,68,],[48,48,48,]),'MULTIPLY':([32,36,38,40,42,43,63,64,78,],[-26,60,-22,-25,-27,-28,-23,-24,-21,]),'DIVIDE':([32,36,38,40,42,43,63,64,78,],[-26,61,-22,-25,-27,-28,-23,-24,-21,]),'LESS':([32,34,35,36,38,40,42,43,56,59,63,64,74,75,76,77,78,],[-26,53,-14,-17,-22,-25,-27,-28,-13,-18,-23,-24,-15,-16,-19,-20,-21,]),'GREATER':([32,34,35,36,38,40,42,43,56,59,63,64,74,75,76,77,78,],[-26,54,-14,-17,-22,-25,-27,-28,-13,-18,-23,-24,-15,-16,-19,-20,-21,]),'DIFFERENT':([32,34,35,36,38,40,42,43,56,59,63,64,74,75,76,77,78,],[-26,55,-14,-17,-22,-25,-27,-28,-13,-18,-23,-24,-15,-16,-19,-20,-21,]),'DOT':([32,34,35,36,38,40,42,43,47,48,52,56,59,63,64,71,72,73,74,75,76,77,78,],[-26,-9,-14,-17,-22,-25,-27,-28,67,68,-8,-13,-18,-23,-24,-10,-11,-12,-15,-16,-19,-20,-21,]),'RIGHTPAR':([32,34,35,36,38,40,42,43,46,47,48,49,52,56,59,62,63,64,71,72,73,74,75,76,77,78,81,82,],[-26,-9,-14,-17,-22,-25,-27,-28,66,-32,-35,69,-8,-13,-18,78,-23,-24,-10,-11,-12,-15,-16,-19,-20,-21,-33,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,],[5,]),'bloque':([4,5,18,45,],[6,9,25,65,]),'aux_var':([7,21,50,],[10,29,70,]),'aux_bloque':([8,13,],[12,23,]),'estatuto':([8,13,],[13,13,]),'asignacion':([8,13,],[14,14,]),'condicion':([8,13,],[15,15,]),'escritura':([8,13,],[16,16,]),'condicion_aux':([8,13,],[18,18,]),'tipo':([21,],[28,]),'expresion':([24,26,27,37,67,68,],[33,47,49,62,47,47,]),'exp':([24,26,27,37,53,54,55,57,58,67,68,],[34,34,34,34,71,72,73,74,75,34,34,]),'termino':([24,26,27,37,53,54,55,57,58,60,61,67,68,],[35,35,35,35,35,35,35,35,35,76,77,35,35,]),'factor':([24,26,27,37,53,54,55,57,58,60,61,67,68,],[36,36,36,36,36,36,36,36,36,36,36,36,36,]),'factor_aux':([24,26,27,37,53,54,55,57,58,60,61,67,68,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'varcte':([24,26,27,37,39,41,53,54,55,57,58,60,61,67,68,],[40,40,40,40,63,64,40,40,40,40,40,40,40,40,40,]),'aux_escritura':([26,67,68,],[46,81,82,]),'comp':([34,],[52,]),'op':([35,],[56,]),'termino_aux':([36,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','little_duck.py',77),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','little_duck.py',78),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','little_duck.py',79),
  ('condicion -> condicion_aux bloque SEMICOLON','condicion',3,'p_condicion','little_duck.py',84),
  ('condicion -> condicion_aux bloque ELSE bloque SEMICOLON','condicion',5,'p_condicion','little_duck.py',85),
  ('condicion_aux -> IF LEFTPAR expresion RIGHTPAR','condicion_aux',4,'p_condicion_aux','little_duck.py',90),
  ('asignacion -> ID EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','little_duck.py',95),
  ('expresion -> exp comp','expresion',2,'p_expresion','little_duck.py',100),
  ('expresion -> exp','expresion',1,'p_expresion','little_duck.py',101),
  ('comp -> LESS exp','comp',2,'p_comp','little_duck.py',106),
  ('comp -> GREATER exp','comp',2,'p_comp','little_duck.py',107),
  ('comp -> DIFFERENT exp','comp',2,'p_comp','little_duck.py',108),
  ('exp -> termino op','exp',2,'p_exp','little_duck.py',113),
  ('exp -> termino','exp',1,'p_exp','little_duck.py',114),
  ('op -> PLUS exp','op',2,'p_op','little_duck.py',119),
  ('op -> MINUS exp','op',2,'p_op','little_duck.py',120),
  ('termino -> factor','termino',1,'p_termino','little_duck.py',124),
  ('termino -> factor termino_aux','termino',2,'p_termino','little_duck.py',125),
  ('termino_aux -> MULTIPLY termino','termino_aux',2,'p_termino_aux','little_duck.py',130),
  ('termino_aux -> DIVIDE termino','termino_aux',2,'p_termino_aux','little_duck.py',131),
  ('factor -> LEFTPAR expresion RIGHTPAR','factor',3,'p_factor','little_duck.py',136),
  ('factor -> factor_aux','factor',1,'p_factor','little_duck.py',137),
  ('factor_aux -> PLUS varcte','factor_aux',2,'p_factor_aux','little_duck.py',142),
  ('factor_aux -> MINUS varcte','factor_aux',2,'p_factor_aux','little_duck.py',143),
  ('factor_aux -> varcte','factor_aux',1,'p_factor_aux','little_duck.py',144),
  ('varcte -> ID','varcte',1,'p_varcte','little_duck.py',149),
  ('varcte -> CTEI','varcte',1,'p_varcte','little_duck.py',150),
  ('varcte -> CTEF','varcte',1,'p_varcte','little_duck.py',151),
  ('tipo -> INT','tipo',1,'p_tipo','little_duck.py',156),
  ('tipo -> FLOAT','tipo',1,'p_tipo','little_duck.py',157),
  ('escritura -> PRINT LEFTPAR aux_escritura RIGHTPAR SEMICOLON','escritura',5,'p_escritura','little_duck.py',162),
  ('aux_escritura -> expresion','aux_escritura',1,'p_aux_escritura','little_duck.py',167),
  ('aux_escritura -> expresion DOT aux_escritura','aux_escritura',3,'p_aux_escritura','little_duck.py',168),
  ('aux_escritura -> CTESTRING DOT aux_escritura','aux_escritura',3,'p_aux_escritura','little_duck.py',169),
  ('aux_escritura -> CTESTRING','aux_escritura',1,'p_aux_escritura','little_duck.py',170),
  ('vars -> VAR aux_var','vars',2,'p_vars','little_duck.py',174),
  ('aux_var -> ID COLON tipo SEMICOLON','aux_var',4,'p_aux_var','little_duck.py',179),
  ('aux_var -> ID COLON tipo SEMICOLON aux_var','aux_var',5,'p_aux_var','little_duck.py',180),
  ('aux_var -> ID COLON aux_var','aux_var',3,'p_aux_var','little_duck.py',181),
  ('programa -> PROGRAM ID COLON vars bloque','programa',5,'p_programa','little_duck.py',186),
  ('programa -> PROGRAM ID COLON bloque','programa',4,'p_programa','little_duck.py',187),
  ('bloque -> LEFTCURL aux_bloque RIGHTCURL','bloque',3,'p_bloque','little_duck.py',192),
  ('aux_bloque -> estatuto','aux_bloque',1,'p_aux_bloque','little_duck.py',197),
  ('aux_bloque -> estatuto aux_bloque','aux_bloque',2,'p_aux_bloque','little_duck.py',198),
  ('empty -> <empty>','empty',0,'p_empty','little_duck.py',207),
]
